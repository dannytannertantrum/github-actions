name: Deployment
on:
  push:
    branches:
      - main
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Load & cache dependencies
        id: cache-deps
        # Path is always relative to the root folder of the project (not this file)
        uses: ./.github/actions/cached-deps
        # Look at our action.yml file - we're setting this to "false", so we won't cache
        # Be sure to look at the conditional though - we're not caching, but we ARE installing dependencies
        # because of if: steps.cache.outputs.cache-hit != 'true' || inputs.caching != 'true'
        with:
          caching: 'false'
      - name: Output information
        run: echo "Cache used? ${{ steps.cache-deps.outputs.used-cache }}"
      - name: Lint code
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Load & cache dependencies
        uses: ./.github/actions/cached-deps
      - name: Test code
        id: run-tests
        run: npm run test
      - name: Upload test report
        if: failure() && steps.run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test.json
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Load & cache dependencies
        uses: ./.github/actions/cached-deps
      - name: Build website
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
          path: ./dist
      - name: Output contents
        run: ls
      - name: Deploy site
        id: deploy
        run: echo "Deploying..."
        # Commenting all of this out because we didn't actually create an S3 bucket in AWS
        # If we wanted this to work, we'd get rid of the "run" command
        # uses: ./.github/actions/deploy-s3-javascript
        # env:
        #   # AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are specific from AWS
        #   # We need those to work with our custom action because the exec function there is
        #   # using the AWS cli
        #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # with:
        #   bucket: my-s3-bucket-name-on-AWS
        #   dist-folder: ./dist
      # These last name and run steps would be for tying our 3rd step in our custom action to
      # output the website URL after our action runs
      # - name: Output information
      #   run: |
      #     echo "Live URL ${{ steps.deploy.outputs.website-url }}"
  information:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Run custom action
        uses: ./.github/actions/deploy-s3-javascript
